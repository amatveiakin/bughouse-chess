// Improvement potential. Factor out SVG images (and make sure there are no `set_inner_html` left).
// Improvement potential. Factor out large function calls (like `update_new_match_rules_body`) from
//   callback closures in order to dedup WASM code and reduce RAM usage.

use std::collections::HashMap;
use std::fmt;
use std::time::Duration;

use bughouse_chess::client::ServerOptions;
use itertools::Itertools;
use strum::IntoEnumIterator;
use wasm_bindgen::prelude::*;

use crate::bughouse_prelude::*;
use crate::web_document::web_document;
use crate::web_element_ext::{TooltipPosition, TooltipWidth, WebElementExt};
use crate::web_error_handling::JsResult;
use crate::web_iterators::IntoHtmlCollectionIterator;
use crate::{IgnorableError, rust_error};

const RATING: &str = "rating"; // filled by JSs
const FAIRY_PIECES: &str = "fairy_pieces";
const STARTING_POSITION: &str = "starting_position";
const DUCK_CHESS: &str = "duck_chess";
const FOG_OF_WAR: &str = "fog_of_war";
const KOEDEM: &str = "koedem";
const DUPLICATE: &str = "duplicate";
const STARTING_TIME: &str = "starting_time";
const PROMOTION: &str = "promotion";
const PAWN_DROP_RANKS: &str = "pawn_drop_ranks";
const DROP_AGGRESSION: &str = "drop_aggression";

const PLACEHOLDER_ICON: &str = r##"<svg class="rule-variant-icon"></svg>"##;

const REGICIDE_CLASS: &str = "rule-warning-regicide";
const REGICIDE_ICON: &str = "
<svg class='inline-icon' viewBox='0 0 100 100'>
 <path d='m36.408 23.945 6.7005-1.0273 1.0304 5.557 6.5262-1.0006 1.0273 6.7005-6.3164 0.96845 1.4693 7.5385q0.15051-0.24388 0.31416-0.48112c5.1065-7.4193 13.621-12.256 21.157-7.7163 7.5558 4.5565 9.5247 17.398 1.4384 26.24-4.5808 5.0085-8.64 9.782-7.4995 15.679l9.5854-0.1708 1.2842 8.3756-46.865 7.1854-1.2842-8.3756 9.1963-2.7089c-0.67859-5.9677-5.9815-9.3058-11.852-12.712-10.36-6.0133-12.329-18.855-6.4892-25.466 5.8245-6.5881 15.398-4.5257 22.497 1.0231q0.22734 0.17816 0.44388 0.3649l-0.85676-7.6324-6.3249 0.96974-1.0273-6.7005 6.5262-1.0006zm-2.3779 26.622c5.123 6.0786 6.8673 13.841 7.3894 17.246-2.0524 0.31469-10.311-1.8992-15.264-6.8591-3.5652-3.5708-5.2493-9.4216-3.0767-12.126s7.7492-2.0601 10.951 1.7396zm19.323-2.9627c-3.0665 7.3342-2.4051 15.262-1.883 18.668 2.0524-0.31469 9.268-4.9011 12.508-11.117 2.3316-4.4749 2.1855-10.561-0.6977-12.491-2.8832-1.9297-8.0105 0.35621-9.927 4.9406z' fill='#808080' fill-rule='evenodd' stroke='#000' stroke-width='.5'/>
 <path d='m84.231 3.0957c-0.16924 0.01262-0.32906 0.10655-0.41992 0.26562l-2.0918 3.6602c-0.14538 0.25452-0.05726 0.57532 0.19727 0.7207l0.71289 0.4082-4.957 8.6777-9.3477-5.3398c-0.51521-0.29428-1.1666-0.11482-1.4609 0.40039l-2.6113 4.5684c-0.29429 0.51521-0.11482 1.1667 0.40039 1.4609l8.2266 4.6992-27.125 47.488 0.09961 8.4238 7.3047-4.1934 27.125-47.488 8.2285 4.6992c0.51521 0.29428 1.1666 0.11677 1.4609-0.39844l2.6094-4.5703c0.29429-0.51521 0.11678-1.1667-0.39843-1.4609l-9.3477-5.3398 4.957-8.6777 0.71289 0.40625c0.25453 0.14538 0.57728 0.05726 0.72266-0.19726l2.0898-3.6582c0.14539-0.25452 0.05726-0.57727-0.19726-0.72266l-6.5898-3.7637c-0.09544-0.05452-0.19924-0.07593-0.30078-0.068359z' stroke='#fff' stroke-linejoin='round'/>
</svg>
";

const ACCOLADE_OFF_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <g fill="none" stroke="#000" stroke-width=".1">
  <path d="m7.54 2.31c-0.263 0.0131-0.484 0.335-0.273 0.543-0.227 0.359-0.471 0.71-0.715 1.06 0.343 0.408 0.585 0.943 0.752 1.57 0.443 0.00444 0.884 0.0243 1.32 0.0449 0.0548 0.363 0.635 0.292 0.674-0.0801 0.0386-0.372-0.53-0.431-0.66-0.0664l-0.5-0.479 0.682-0.5c0.207 0.295 0.731 0.0234 0.613-0.316-0.118-0.34-0.683-0.191-0.662 0.176l-0.836-0.0664 0.436-0.717c0.284 0.232 0.737-0.141 0.531-0.436-0.206-0.295-0.732-0.0289-0.615 0.312l-0.803 0.26-0.0957-0.688c0.37 0.108 0.654-0.384 0.332-0.57-0.0604-0.035-0.123-0.0499-0.184-0.0469z"/>
  <path d="m6.2 1.23c-0.25 0.00504-0.448 0.315-0.338 0.58-0.258 0.101-0.668 0.0702-0.85 0.633-0.0961 0.298-0.0464 0.505 0.0508 0.65 0.0318 0.00427 0.0636 0.00709 0.0957 0.0117 0.358 0.0676 0.664 0.2 0.93 0.385 0.198-0.037 0.413-0.158 0.531-0.523 0.118-0.366-0.0552-0.46-0.143-0.68-0.263 0.0556-0.446 0.115-0.545 0.42l-0.17-0.0488c0.141-0.436 0.253-0.491 0.609-0.727 0.248-0.205 0.192-0.626-0.0938-0.693-0.0268-0.00636-0.0522-0.00833-0.0781-0.00781z"/>
  <path d="m4.38 1.45-0.639 0.281 0.246 0.566-0.34 0.148-0.248-0.566-0.67 0.295 0.248 0.566-0.342 0.148-0.246-0.566-0.639 0.281 0.34 0.777 0.777 0.279c0.237-0.284 0.5-0.463 0.752-0.564 0.242-0.0505 0.483-0.0687 0.727-0.0664l0.0488-0.0215 0.324-0.779-0.34-0.779z"/>
  <path class="a" d="m5.15 3.1c-0.535-0.0771-1.03-0.107-1.53-0.0023-0.525 0.211-1.1 0.758-1.38 1.89-0.082 0.329-0.23 0.487-0.405 0.674-0.225 0.225-0.408 0.488-0.539 0.778-0.378 0.821 0.641 1.64 1.38 0.896 0.313-0.313 0.683-0.563 1.09-0.737 0.441-0.209 0.761-0.36 0.942-1.11 0.0858 0.348 0.0517 1.17-0.774 1.67-0.825 0.5-0.997 1.56-0.98 1.87h4.69c0-2.97-0.392-5.53-2.5-5.93z"/>
  <path class="a" d="m5.15 3.1c-0.535-0.0771-1.03-0.107-1.53-0.0023-0.525 0.211-1.1 0.758-1.38 1.89-0.082 0.329-0.23 0.487-0.405 0.674-0.225 0.225-0.408 0.488-0.539 0.778-0.378 0.821 0.641 1.64 1.38 0.896 0.313-0.313 0.683-0.563 1.09-0.737 0.441-0.209 0.761-0.36 0.942-1.11 0.0858 0.348 0.0517 1.17-0.774 1.67-0.825 0.5-0.997 1.56-0.98 1.87h4.69c0-2.97-0.392-5.53-2.5-5.93z"/>
 </g>
</svg>
"##;
const ACCOLADE_ON_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <g stroke="#000" stroke-width=".1">
  <path d="m8.37 3.48c0.284 0.232 0.736-0.14 0.53-0.435-0.206-0.295-0.732-0.0282-0.615 0.313l-0.804 0.258-0.0946-0.688c0.37 0.108 0.655-0.384 0.332-0.57-0.322-0.186-0.718 0.241-0.458 0.497-0.255 0.404-0.53 0.797-0.804 1.19l0.731 1.44c0.48 0.00168 0.957 0.0245 1.43 0.0468 0.0548 0.363 0.635 0.293 0.674-0.0795 0.0386-0.372-0.528-0.43-0.659-0.0653l-0.5-0.48 0.68-0.5c0.207 0.295 0.732 0.0249 0.614-0.315-0.118-0.34-0.684-0.192-0.663 0.175l-0.836-0.0664z" fill="#ab37c8"/>
  <path d="m5.93 2.7-0.169-0.0478c0.141-0.436 0.253-0.492 0.61-0.727 0.248-0.205 0.191-0.624-0.0939-0.692-0.285-0.0678-0.538 0.278-0.417 0.57-0.258 0.101-0.668 0.0705-0.85 0.633-0.183 0.568 0.168 0.805 0.355 0.918l0.439 0.141c0.222 0.015 0.634 0.0245 0.814-0.535 0.118-0.366-0.0561-0.461-0.143-0.681-0.263 0.0556-0.447 0.115-0.545 0.42z" fill="#60f"/>
  <path d="m1.75 2.61 0.34 0.779 0.787 0.283 1.52-0.657 0.323-0.779-0.34-0.779-0.638 0.28 0.247 0.567-0.341 0.15-0.247-0.567-0.67 0.294 0.247 0.567-0.341 0.15-0.247-0.567z" fill="#04a"/>
  <path class="a" d="m5.15 3.1c-0.535-0.0771-1.03-0.107-1.53-0.0023-0.525 0.211-1.1 0.758-1.38 1.89-0.082 0.329-0.23 0.487-0.405 0.674-0.225 0.225-0.408 0.488-0.539 0.778-0.378 0.821 0.641 1.64 1.38 0.896 0.313-0.313 0.683-0.563 1.09-0.737 0.441-0.209 0.761-0.36 0.942-1.11 0.0858 0.348 0.0517 1.17-0.774 1.67-0.825 0.5-0.997 1.56-0.98 1.87h4.69c0-2.97-0.392-5.53-2.5-5.93z" fill="#2e2e2e" fill-rule="evenodd"/>
 </g>
</svg>
"##;

const FISCHER_RANDOM_OFF_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <g fill="none" stroke="#000">
  <g stroke-linejoin="bevel" stroke-width=".108">
   <rect transform="matrix(.706 .708 -.257 .966 0 0)" x="2.71" y="-.0116" width="4.34" height="4.34"/>
   <rect transform="matrix(-.966 .257 -.708 -.706 0 0)" x="-4.33" y="-7.05" width="4.34" height="4.34"/>
   <rect transform="matrix(-.26 .966 -.966 .26 0 0)" x="7.06" y="-11.4" width="4.34" height="4.34"/>
  </g>
  <g stroke-width=".1">
   <path d="m5.11 2-0.751-0.311c0.0293 0.126 0.0727 0.296 0.274 0.412-0.0363 0.0125-0.0678 0.0299-0.0938 0.0516-0.134 0.126-0.191 0.374 0.0319 0.798 0.0646 0.123 0.0552 0.192 0.044 0.275-0.0189 0.101-0.0107 0.211 0.0242 0.325 0.0966 0.324 0.714 0.507 0.775 0.173 0.026-0.14 0.0914-0.265 0.193-0.366 0.104-0.117 0.179-0.202 0.0311-0.479 0.132 0.112 0.357 0.401 0.194 0.658-0.163 0.257 0.0783 0.641 0.175 0.748l1.75-0.47c-0.859-1.03-1.75-1.89-2.65-1.82z"/>
   <path d="m2.5 3.49-0.171 0.528 0.187 0.66-0.382 0.889 0.0841 0.404-0.176-0.176-0.332 0.201-0.14 0.431 1.39 1.39 0.14-0.431-0.071-0.603-0.176-0.176 0.241-0.0796 0.24-1.02 0.42-0.0606 0.171-0.528-0.347-0.346-0.125 0.384-0.185-0.185 0.125-0.384-0.364-0.364-0.125 0.384-0.185-0.185 0.125-0.384z"/>
   <path d="m6.79 4.9 0.3-0.0806-0.0506 0.282 0.293-0.0785-0.0701 0.341-0.283 0.076-0.0656 0.382q0.0105-0.0132 0.0214-0.0261c0.341-0.403 0.783-0.688 1.02-0.485 0.242 0.203 0.108 0.857-0.384 1.35-0.278 0.277-0.531 0.54-0.582 0.839l0.408-0.0485-0.0876 0.426-2.1 0.564 0.0876-0.426 0.434-0.178c0.0724-0.305-0.0951-0.455-0.285-0.606-0.336-0.267-0.202-0.92 0.157-1.28 0.358-0.363 0.727-0.297 0.933-0.0404q0.00659 0.00824 0.0126 0.017l0.093-0.39-0.284 0.0761 0.0701-0.341 0.293-0.0785zm-0.551 1.38c0.113 0.292 0.0557 0.685 0.0201 0.858-0.092 0.0247-0.403-0.0552-0.529-0.29-0.0901-0.169-0.0622-0.464 0.0754-0.612 0.138-0.148 0.362-0.138 0.433 0.0443zm0.866-0.233c-0.254 0.39-0.36 0.796-0.396 0.969 0.092-0.0247 0.474-0.291 0.717-0.624 0.174-0.24 0.271-0.553 0.182-0.641s-0.344 0.0515-0.503 0.296z"/>
  </g>
 </g>
</svg>
"##;
const FISCHER_RANDOM_ON_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <g stroke="#000" stroke-linejoin="bevel" stroke-width=".215">
  <rect transform="matrix(.706 .708 -.257 .966 0 0)" x="2.71" y="-.0116" width="4.34" height="4.34" fill="#dbdbdb"/>
  <rect transform="matrix(-.966 .257 -.708 -.706 0 0)" x="-4.33" y="-7.05" width="4.34" height="4.34" fill="#f4f4f4"/>
  <rect transform="matrix(-.26 .966 -.966 .26 0 0)" x="7.06" y="-11.4" width="4.34" height="4.34" fill="#c3c3c3"/>
 </g>
 <path d="m5.11 2-0.751-0.311c0.0293 0.126 0.0727 0.296 0.274 0.412-0.0363 0.0125-0.0678 0.0299-0.0938 0.0516-0.134 0.126-0.191 0.374 0.0319 0.798 0.0646 0.123 0.0552 0.192 0.044 0.275-0.0189 0.101-0.0107 0.211 0.0242 0.325 0.0966 0.324 0.714 0.507 0.775 0.173 0.026-0.14 0.0914-0.265 0.193-0.366 0.104-0.117 0.179-0.202 0.0311-0.479 0.132 0.112 0.357 0.401 0.194 0.658-0.163 0.257 0.0783 0.641 0.175 0.748l1.75-0.47c-0.859-1.03-1.75-1.89-2.65-1.82z" stroke-width=".04"/>
 <path d="m2.5 3.49-0.171 0.528 0.187 0.66-0.382 0.889 0.0841 0.404-0.176-0.176-0.332 0.201-0.14 0.431 1.39 1.39 0.14-0.431-0.071-0.603-0.176-0.176 0.241-0.0796 0.24-1.02 0.42-0.0606 0.171-0.528-0.347-0.346-0.125 0.384-0.185-0.185 0.125-0.384-0.364-0.364-0.125 0.384-0.185-0.185 0.125-0.384z" stroke-width=".0395"/>
 <path d="m6.79 4.9 0.3-0.0806-0.0506 0.282 0.293-0.0785-0.0701 0.341-0.283 0.076-0.0656 0.382q0.0105-0.0132 0.0214-0.0261c0.341-0.403 0.783-0.688 1.02-0.485 0.242 0.203 0.108 0.857-0.384 1.35-0.278 0.277-0.531 0.54-0.582 0.839l0.408-0.0485-0.0876 0.426-2.1 0.564 0.0876-0.426 0.434-0.178c0.0724-0.305-0.0951-0.455-0.285-0.606-0.336-0.267-0.202-0.92 0.157-1.28 0.358-0.363 0.727-0.297 0.933-0.0404q0.00659 0.00824 0.0126 0.017l0.093-0.39-0.284 0.0761 0.0701-0.341 0.293-0.0785zm-0.551 1.38c0.113 0.292 0.0557 0.685 0.0201 0.858-0.092 0.0247-0.403-0.0552-0.529-0.29-0.0901-0.169-0.0622-0.464 0.0754-0.612 0.138-0.148 0.362-0.138 0.433 0.0443zm0.866-0.233c-0.254 0.39-0.36 0.796-0.396 0.969 0.092-0.0247 0.474-0.291 0.717-0.624 0.174-0.24 0.271-0.553 0.182-0.641s-0.344 0.0515-0.503 0.296z" fill-rule="evenodd" stroke-width=".0393"/>
</svg>
"##;

const DUCK_CHESS_OFF_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <path transform="matrix(.0978 0 0 .0978 .159 2.07e-7)" d="m61.1 12.8c-9.85-4.7e-5 -17.5 7.01-17.8 16.8-0.217 6.2 4.33 11.5 6.24 14.4-0.252-0.0052-0.504-0.0078-0.756-0.0078-5.22-7.6e-5 -5.85 8.26-19.1 7.68-5.45-1.41-8.76-6.86-13.2-10.4-0.432-0.708-2.76-0.329-3.44 2.71-1 7.01 1.57 18.6 3.39 26.2 3 11.3 15.1 19.3 29.1 19.3 16.4 2.71e-4 29.8-11 29.8-24.6-5.56e-4 -6.51-1.81-12-6.85-17.4 4.47-2.62 6.86-5.02 8.95-9.61l7.62-3.33c1.35-0.187 1.77-1.92 0.662-2.71l-6.94-4.35c-1.47-8.56-8.89-14.8-17.6-14.8z" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.02"/>
</svg>
"##;
const DUCK_CHESS_ON_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <path transform="matrix(.0978 0 0 .0978 .159 2.07e-7)" d="m61.1 12.8c-9.85-4.7e-5 -17.5 7.01-17.8 16.8-0.217 6.2 4.33 11.5 6.24 14.4-0.252-0.0052-0.504-0.0078-0.756-0.0078-5.22-7.6e-5 -5.85 8.26-19.1 7.68-5.45-1.41-8.76-6.86-13.2-10.4-0.432-0.708-2.76-0.329-3.44 2.71-1 7.01 1.57 18.6 3.39 26.2 3 11.3 15.1 19.3 29.1 19.3 16.4 2.71e-4 29.8-11 29.8-24.6-5.56e-4 -6.51-1.81-12-6.85-17.4 4.47-2.62 6.86-5.02 8.95-9.61l7.62-3.33c1.35-0.187 1.77-1.92 0.662-2.71l-6.94-4.35c-1.47-8.56-8.89-14.8-17.6-14.8z" fill="#d4d400" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.04"/>
</svg>
"##;

const FOG_OF_WAR_OFF_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <path d="m1.49 1.77c0.0528-0.0584 0.71-0.589 1.07-0.575 0.508 0.144 0.606-0.465 1.06-0.565 0.615-0.251 1.36 0.0335 1.69 0.592 0.472-0.503 1.28-0.702 1.91-0.369 0.494 0.0909 0.564 0.808 1 0.822 0.733 0.0414 1.11 1 0.674 1.57 0.0748 0.208 0.313 0.615 0.441 0.168 0.519-0.795 0.0161-2-0.92-2.17-0.213-0.0355-0.444-0.0446-0.648 0.0372m-3.92 0.281c-0.261-0.121-0.554-0.31-0.142-0.459 0.43-0.23 1.01-0.0307 1.22 0.409-0.231-0.0263-0.781-0.237-1.07 0.0563 0.304 0.239-0.346 0.406-0.478 0.569-0.479 0.00526-0.782 0.44-1.17 0.604-0.248 0.104-0.64 0.353-0.51-0.151 0.0624-0.721 0.942-1.17 1.57-0.833 0.121 0.0448 0.222 0.133 0.319 0.216m3.61-0.562c-0.446-0.113-0.963-0.126-1.37 0.131-0.477 0.3 0.1-0.342 0.313-0.326 0.422-0.16 0.883-0.00233 1.2 0.282 0.135 0.074 0.27 0.154 0.381 0.262m-4.85-0.567c0.16 0.0292 0.476 0.0864 0.633 0.129m1.79-0.0867c-0.131 0.137-0.175 0.569-0.412 0.338m-0.725-0.119c0.148 0.034 0.241 0.196 0.405 0.14 0.108-0.0101 0.221 0.0221 0.327-0.00222m0.0437-0.05-0.00625 0.0562m-0.531 0c-0.138 0.0474-0.28 0.0784-0.419 0.125m1.62-0.0938c-0.0243 0.0732-0.0329 0.0615 0.0375 0.0312m-0.562-0.0188c0.179 0.0219 0.392 0.303 0.506 0.0438m-2.78-0.0312c-0.00424 0.276 0.0752 0.518-0.24 0.347-0.187-0.0535-0.371-0.0346-0.56-0.00921m1.24 6.09c0.111 0.197 0.219 0.581-0.0763 0.252-0.318-0.199 0.267-0.234 0.0598-0.546 0.0255-0.435 0.385-0.903 0.0059-1.3-0.306-0.131-0.0872-0.516-0.178-0.665-0.544-0.282-0.769 0.518-1.32 0.469-0.732 0.105-1.45-0.485-1.51-1.22-0.07-0.585 0.259-1.17 0.757-1.46-0.322-0.622-0.113-1.43 0.512-1.84-0.275 0.419-0.388 1.04-0.127 1.53 0.125-0.109 0.258-0.247 0.374-0.372m1.51-1.16c0.00282 0.123 0.0161 0.247 0.0625 0.362m2.51-0.00625c-0.527 0.455-0.367 1.41 0.279 1.67 0.581 0.285 1.36-0.249 1.23-0.907-0.0801-0.444-0.583-0.706-0.926-0.788-0.0493 0.212-0.351 0.578-0.476 0.151-0.242-0.327 0.505-0.476 0.764-0.455 0.436 0.0222 0.805 0.338 1.01 0.692-0.00613-0.287 0.703-0.379 0.137-0.479-0.096-0.0536-0.244 0.039-0.274-0.0934m-2.12-0.0875c-0.213 0.199-0.303 0.591-0.429 0.768-0.0219-0.311-0.0307-0.666-0.454-0.527-0.0653 0.394-0.804 0.583-0.899 0.629m3.42-0.777c0.0541 0.108 0.0905 0.218 0.112 0.338m0.419-0.269c0.0111 0.128 0.074 0.26 0.0375 0.388m-3.09-0.312c-0.358 0.00889-0.72 0.232-0.89 0.581-0.167 0.255-0.183 0.872 0.166 0.471 0.0585-0.0311 0.118-0.067 0.186-0.0706m0.712-0.975c0.103 0.278-0.148 0.521 0.281 0.538m-2.23-0.519c-0.382 0.0893-0.668 0.37-0.959 0.606-0.0482 0.0656-0.0492 0.151-0.091 0.219m1.07-0.819c0.0825 0.0473 0.202 0.0182 0.269 0.0938m1.9-0.075c0.0787 0.00966 0.152 0.0464 0.219 0.0875m2.92-0.0688c0.312-0.0746 0.734 0.622 0.219 0.374-0.202-0.0571-0.413-0.00225-0.612-0.0175m-4.33-0.352c-0.313 0.264-0.185 0.87-0.388 1.07-0.403-0.274-0.5 0.228-0.587 0.408-0.442-0.223-0.983-0.214-1.42 0.00549m5.37-1.32c0.117-0.03 0.235-0.0516 0.356-0.0375m-2.86 0.137c0.032 0.0526 0.0399 0.115 0.0688 0.169m-1.73-0.14c-0.0358 0.0956-0.056 0.224-0.0422 0.327m3.93-0.262c-0.192 0.253 0.0152 0.722-0.312 0.538 0.033 0.274-0.0928 0.617 0.331 0.58 0.424 0.0957 0.849-0.071 1.18-0.324m-3.02-0.788c0.15 0.0397 0.309 0.0341 0.462 0.0188m2.99-0.0188c0.173 0.286 0.0178 0.73 0.106 0.946 0.404-0.148 0.897 0.162 0.943 0.583-0.299 0.0941 0.0503 0.669 0.0234 0.189 0.00195-0.0582 2.36e-4 -0.117-0.0102-0.174m-4.36-1.51c-0.345 0.156-0.53 0.621-0.259 0.939 0.312 0.392 1.03-0.14 0.57-0.473-0.13-0.103-0.387 0.108-0.186 0.197m1.02-0.631c0.132 0.101 0.14 0.287 0.212 0.425m2.82-0.412c0.157 0.076 0.308 0.161 0.456 0.25m-1.88-0.244c-0.266 0.282-0.304 0.862-0.79 0.825-0.179-0.0232-0.31-0.161-0.391-0.312m-0.962-0.462c-0.0387 0.481 0.0984 0.997 0.475 1.32 0.164 0.203 0.777 0.326 0.204 0.447-0.321 0.182-0.397 0.639-0.672 0.885 0.0514 0.317-0.123 0.455-0.251 0.719m-2.16-2.87c0.0978-0.2 0.292-0.375 0.506-0.438m3.39 0.269c-0.421-0.173 0.352-0.436 0.356 0m-4.57-0.231c-0.133 0.232-0.27 0.471-0.3 0.744m5.79-0.512c0.387-0.0806 0.761 0.0689 1.06 0.312m-0.412-0.231c-0.149 0.191-0.428 0.252-0.656 0.2m-4.73-0.102c0.0578 0.635 0.56 1.28 1.21 1.36 0.475 0.0809 0.951-0.132 1.26-0.488m-2.5-0.781c-0.46 0.689-0.198 1.72 0.544 2.1 0.256 0.0998 0.549 0.12 0.311 0.442-0.238 0.347 0.234 0.89-0.198 1.08-0.115 0.0764-0.178 0.207-0.288 0.285m0.175-3.84c0.056 0.388 0.332 0.668 0.786 0.725 0.409 0.0517 0.691-0.145 0.864-0.382m-3.88-0.319c-0.0232 0.0591-0.05 0.117-0.075 0.175m0.6-0.0375c0.0384-0.0507 0.085-0.104 0.15-0.119m3.09 0.075c-0.277 0.175-0.365 0.156-0.106 0.444m2.77-0.456c-0.119 0.399-0.595 0.677-0.846 0.906 0.0306 0.304 0.542 0.783 0.712 0.651-0.335-0.219-0.302-0.614-0.294-0.951m-3.22-0.538c-0.123 0.0746-0.246 0.149-0.325 0.275m5.46-0.2c0.539 0.599 0.433 1.6-0.194 2.1-0.252 0.133-0.436 0.262-0.185 0.519 0.0802 0.401 0.347 0.739 0.325 1.16 0.0117 0.977-1.05 1.75-1.98 1.47-0.494-0.0803 0.289-0.327 0.362-0.524 0.806-0.079 1.47-0.83 1.41-1.65m-6.21-2.75c-0.289-0.176-0.491-0.332 0.0438-0.231m-0.381-0.00625h0.025m4.01 0c-0.00334 0.078-0.029 0.153-0.0312 0.231m2.65-0.251c0.308 0.69-0.086 1.6-0.799 1.82 0.0444 0.128 0.326 0.283 0.426 0.424m-0.781-1.73c-0.41-0.0782 0.278-0.502 0.337-0.0687 0.0472 0.153-0.0919 0.488 0.168 0.225 0.043-0.036 0.0923-0.0627 0.139-0.0941m-5.31-0.319c-0.0925 0.315-7.98e-5 0.57 0.362 0.4m-0.975 0.256c-0.372-0.231-0.829-0.193-1.23-0.0998-0.425 0.251-0.391 0.854-0.34 1.28-0.558-0.28-0.577-1.16-0.0978-1.54 0.534-0.495 1.49-0.223 1.73 0.442 0.232 0.257-0.0631 0.811 0.0717 0.938 0.112-0.0622 0.365-0.0621 0.35-0.22l-0.0124-0.0865m2.37-1.21c0.04 0.148 0.00361 0.307-0.00625 0.456m1.85-0.288c0.137 0.385 0.694 0.549 0.935 0.166m-2.3-0.0914c0.308 0.0807 0.619 0.0812 0.925-0.0187m-3.61 0.0562c0.0775 0.425 0.703 0.948 1.08 0.582 0.118-0.108 0.234-0.226 0.296-0.376m1.79-0.175c0.112 0.575 0.605 1.06 1.19 1.15 0.00174 0.384 0.561 0.333 0.718 0.703 0.184 0.261 0.189 0.585-0.0952 0.268-0.0879-0.0663-0.469-0.246-0.294-0.0188-0.0137 0.384 0.53 0.789 0.148 1.12-0.277 0.273-0.306 0.0734-0.236-0.212 0.0108-0.368-0.475 0.224-0.703-0.0289-0.306-0.0895-0.473-0.347-0.0853-0.454 0.352-0.255 0.58-0.675 0.596-1.11m-3.94-1.41c-0.0352 0.132 0.0247 0.406-0.162 0.425m-1.48-0.406c9.59e-4 0.0595 0.239 0.5 0.156 0.312m-0.388-0.288c0.101 0.0583 0.198 0.135 0.306 0.181m2.84-0.162c-0.0837 0.333-0.426 0.609-0.769 0.6m4.42-0.562c-0.083 0.414-0.629 0.705-1.02 0.55m-1.25 1.42c-0.0738-0.292 0.306-0.329 0.356-0.594 0.266 0.347 0.0744 0.917-0.392 0.841 0.203-0.522-0.566-0.319-0.742-0.648-0.407-0.447-0.0729-1.23 0.517-1.29 0.141-0.026 0.283-0.0123 0.423 0.0172m-5.47 0.306c0.0615 0.121 0.126 0.251 0.262 0.304-0.149 0.257-0.223 0.613 0.287 0.49 0.506-0.0523 0.855-0.644 0.635-1.12 0.158 0.142 0.314 0.286 0.516 0.355m-1.22-0.075c-0.121-0.393 0.574 0.00109 0.235 0.255-0.0951 0.13-0.264 0.149-0.41 0.12m4.28-0.406c0.396 0.136 0.911 0.237 1.12 0.524 0.102-0.0734 0.223-0.11 0.332-0.168m-0.956-0.156c-0.498 0.0609-0.176 0.952 0.14 0.5 0.00474-0.0476-0.0365-0.106-0.09-0.0875m-1.96 0.706c-0.126 0.378 0.491 0.296 0.577 0.238-0.0815-0.42-0.814-0.0265-0.557-0.578 0.054-0.424 0.351-0.586 0.711-0.722m-3.04 0.188c-0.13-0.213 0.262-0.174 0.269 0.00625m4.96-0.0687c0.0651 0.276 0.11 0.847-0.281 0.656l-0.0438 0.0254m-3.25-0.662c0.0581 0.388-0.285 0.768 0.0879 1.06 0.0453 0.0942 0.0862 0.193 0.0996 0.298m-2.3-1.33c0.00918 0.183 0.153 0.32 0.312 0.388m1.34-0.362c-0.00401 0.142-0.00623 0.294-0.0688 0.425m2.39-0.412c0.15-0.0148 0.291 0.0318 0.431 0.075m1.79-0.0125c0.191 0.0246 0.381-0.0116 0.569-0.0438m-4.28 0.025c0.178 0.013 0.355-5.44e-4 0.531-0.0188m2.25 0.0688c0.00363 0.0979 0.00881 0.196 0.00625 0.294m-4.05-0.269c-0.0468 0.06-0.0725 0.133-0.106 0.2m2.38-0.0938c0.0711 0.458 0.389 0.905 0.855 1.01 0.107-0.115 0.123-0.282 0.113-0.432m-4.32-0.556c-0.0458 0.0494-0.11 0.0888-0.131 0.156m-0.412-0.131c0.0195 0.0431 0.172 0.0843 0.205 0.103m5.67 0.166c0.0389-0.0956 0.16-0.137 0.25-0.169m-1.68 0.075c-0.165 0.0211-0.298 0.107-0.35 0.269m1.96-0.0812c-0.0557 0.128-0.128 0.268-0.25 0.344m-4.32 0.512c-0.342-0.182 0.396-0.387 0.341 0.0188 0.0169 0.633-0.977 0.449-0.887-0.117 0.123-0.305 0.78-0.25 0.915-0.679l0.0431-0.0479m-2.12 0.0438c0.423 0.296 0.134 0.807 0.342 1.22 0.29 0.405 0.335 0.941 0.717 1.29 0.347 0.338 0.847 0.521 1.33 0.428 0.393 0.312 0.91 0.512 1.42 0.397 0.483-0.0307 0.744-0.504 1.17-0.617 0.457-0.142 0.743-0.73 1.26-0.614 0.133 0.0174 0.269 0.0448 0.403 0.0278m-4.01-2.12c-0.0749 0.211-0.251 0.13-0.419 0.138m4.54-0.106c0.106 0.0319 0.2 0.0844 0.294 0.144m-1.67-0.0688c0.0551-0.0287 0.117-0.0375 0.175-0.0562m-3.52 0.0625c0.0378 0.0257 0.0834 0.025 0.125 0.0375m2.48-0.0375c0.0611 0.0583 0.0124 0.144-0.05 0.175m-4.31 0.0188c0.28 0.16 0.577 0.252 0.9 0.244m1.19-0.156c-0.138 0.221-0.258 0.845-0.00625 0.937m1.1-0.938c-0.15 0.0357-0.291 0.0966-0.438 0.144m0.973-0.152c0.451 0.0554 0.651 0.625 1.1 0.63 0.364 0.116 0.982-0.374 0.869 0.273-0.11 0.429 0.748 0.507 0.594-0.0293l0.00646-0.0531m0.0625-0.725c0.359 0.0546-0.153 0.444-0.281 0.156m1.31-0.15c0.028 0.257-0.0461 0.557-0.238 0.738m-6.7-0.719c-0.0704 0.278 0.116 0.873 0.329 0.825 0.00709-0.164 0.0313-0.344 0.128-0.481m3.83-0.338c0.16 0.0578 0.351 0.0676 0.512 0.0125m-3.92 2.34c-0.754 0.123-1.52-0.497-1.6-1.25-0.0494-0.361 0.00945-0.78 0.241-1.07m1.79 0.0875c0.0778-0.0194 0.157-0.0339 0.238-0.0375m4.92 0.112c-0.0403 0.119-0.107 0.223-0.188 0.319m-2.66 0.625c-0.319-0.0812-0.523-0.386-0.862-0.408-0.608-0.408 0.404-0.516 0.662-0.266 0.207 0.0926 0.721 0.766 0.208 0.675-0.268 0.276-0.341 0.817-0.851 0.768-0.473 0.00509-0.835-0.549-0.657-0.981 0.332 0.197 0.372 0.351 0.1 0.65m-0.881-1.22c0.0437 0.0411 0.0958 0.0708 0.144 0.106m1.58-0.106c0.118 0.162 0.348 0.263 0.544 0.3m1.47-0.212c-0.139 0.294-0.812 0.928-0.844 0.287-0.0283-0.102-0.103-0.177-0.144-0.274m-1.96 0.469c0.0601-0.198 0.201-0.396 0.4-0.469m1.84 0.05c-0.0255 0.071-0.11 0.0791-0.169 0.106m-3.88 0.275c0.154 0.296 1.07 0.398 0.931 0.025-0.0492-0.161 0.0902-0.339 0.251-0.356m-0.7 0.125c-0.0407 0.153-0.00652 0.302 0.0313 0.45m1.98-0.325c-0.594 0.0884-0.0496 1.05 0.157 0.464-0.0137-0.0385-0.0617-0.0667-0.101-0.0449m1.91-0.394c0.0487 0.484-0.48 0.671-0.558 1.09-0.0433 0.115-0.123 0.209-0.179 0.317m-2.47-1.39c-0.0448 0.094-0.148 0.162-0.244 0.194m3.91-0.0438c-0.0475 0.246-0.141 0.47-0.275 0.681m1.3-0.631c-0.153 0.0798-0.355 0.121-0.525 0.0875m-1.42-0.153c0.0269 0.184 0.0423 0.505 0.0211 0.689m-0.959-0.598c0.0147 0.081 0.0568 0.252 0.0648 0.334m0.909-0.265c0.0952 0.043 0.187 0.0968 0.294 0.106m-0.781-0.0938c0.155 0.738-0.644 1.4-1.35 1.2-0.304 0.0309-0.356-0.296-0.0402-0.235 0.482 0.0746 0.941-0.128 1.31-0.419m-1.42-0.523c0.0356 0.00512 0.122 0.00469 0.157 0.0109m-2.62 0.00625c0.368 0.252 0.741 0.472 1.12 0.695 0.159-0.0719 0.315-0.155 0.426-0.295m3.66-0.144c0.0671 0.0339 0.146 0.0469 0.206 0.0938m-4.7 0.05c0.271 0.0408 0.543 0.0158 0.806-0.0688m0.323 0.267c0.0665 0.218 0.419 0.221 0.589 0.314m-1.29-0.212c0.225 0.117 0.538 0.119 0.762 0m0.125 0.075c0.015 0.0217 0.0195 0.0976 0.0562 0.00625m-0.0375 0.0438c0.0881 0.0694 0.162 0.171 0.275 0.2m2.21-0.0813c0.324 0.108 0.676 0.00983 0.988-0.0938m-2.45 0.0812c0.0682 0.081 0.193 0.0753 0.275 0.138m-1.78-0.106c0.0636 0.0874 0.157 0.155 0.2 0.256" fill="none" stroke="#080808" stroke-width=".07"/>
</svg>
"##;
const FOG_OF_WAR_ON_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <ellipse cx="4.84" cy="5.03" rx="3.98" ry="3.91" fill="#4459b7" stroke-linejoin="round" stroke-width=".974"/>
 <g fill-rule="evenodd">
  <path transform="matrix(.0481 -.0732 .0732 .0481 .989 5.09)" d="m48.5 13.7c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4689b8"/>
  <path transform="matrix(.0575 .066 -.066 .0575 2.23 -.883)" d="m39.7 22.8c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#404cbc"/>
  <path transform="matrix(-.0575 -.066 .066 -.0575 10.4 12.2)" d="m83.7 39.4c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4441a9"/>
  <path transform="matrix(-.0725 -.0491 .0491 -.0725 10.3 17.4)" d="m89.2 80.1c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4d62b2"/>
  <path transform="matrix(-.053 -.0698 .0698 -.053 5.24 16.1)" d="m72.2 72.1c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4349af"/>
  <path transform="matrix(-.0727 -.0488 .0488 -.0727 10.9 15.5)" d="m88.4 62.4c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#423ea9"/>
  <path transform="matrix(-.0587 -.065 .065 -.0587 3.95 15.5)" d="m57.7 74.2c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#3d3ea3"/>
  <path transform="matrix(-.08 .0357 -.0357 -.08 6.44 11)" d="m19.3 67.6c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#3e5aa9"/>
  <path transform="matrix(.0867 -.0124 .0124 .0867 .575 .183)" d="m8.89 86.8c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#404ba9"/>
  <path transform="matrix(.0271 -.0833 .0833 .0271 -4.9 7.03)" d="m22.5 89c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4d48b7"/>
  <path transform="matrix(-.0631 -.0607 .0607 -.0631 2.1 14.7)" d="m41.1 80.3c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#52419a"/>
  <path transform="matrix(.0598 .064 -.064 .0598 6.42 .982)" d="m19.7 77.7c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4356b3"/>
  <path transform="matrix(-.0203 .0852 -.0852 -.0203 4.41 1.43)" d="m23.3 19.8c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4a6da9"/>
  <path transform="matrix(-.0871 .00899 -.00899 -.0871 14.3 3.24)" d="m75.8 11.3c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4f48a8"/>
  <path transform="matrix(-.0582 -.0655 .0655 -.0582 12.2 9.42)" d="m89.7 16.9c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#484eab"/>
  <path transform="matrix(-.0422 -.0767 .0767 -.0422 5.52 5.62)" d="m45.7 5.65c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4d86b6"/>
  <path transform="matrix(.0575 .0661 -.0661 .0575 1.74 .108)" d="m30.2 11.5c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#44769f"/>
  <path transform="matrix(.00632 -.0873 .0873 .00632 3.77 13.3)" d="m81.8 13.9c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#3e5da4"/>
  <path transform="matrix(.0312 .0818 -.0818 .0312 1.13 -2.31)" d="m75.8 11.3c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4a47ae"/>
  <path transform="matrix(.0862 -.0156 .0156 .0862 -4.98 -2.97)" d="m82.2 93.3c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4264a5"/>
  <path transform="matrix(-.045 -.0751 .0751 -.045 2.84 14.3)" d="m65.4 84.9c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4a4cb5"/>
  <path transform="matrix(-.0285 .0828 -.0828 -.0285 8.17 5.72)" d="m19.3 67.6c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#3d5fb1"/>
  <path transform="matrix(.00276 .0875 -.0875 .00276 7.76 -1.54)" d="m72.2 72.1c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4f47b9"/>
  <path transform="matrix(-.0587 -.065 .065 -.0587 5.02 9.53)" d="m17.9 7.97c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#3f4ab1"/>
  <path transform="matrix(.0779 .04 -.04 .0779 9.17 -1.95)" d="m19.3 67.6c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#3e63b8"/>
  <path transform="matrix(.0449 .0752 -.0752 .0449 10.7 -2.23)" d="m19.3 67.6c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4743a5"/>
  <path transform="matrix(.062 .0619 -.0619 .062 7.3 -1.29)" d="m19.3 67.6c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#4647ba"/>
  <path transform="matrix(.0398 .078 -.078 .0398 9.07 -1.05)" d="m19.3 67.6c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#414ea3"/>
  <path transform="matrix(.071 .0513 -.0513 .071 8.64 -2.86)" d="m19.3 67.6c0.398 0.69-0.733 0.877-1.15 0.662-1.12-0.583-0.902-2.16-0.177-2.95 1.3-1.42 3.57-1.02 4.76 0.307 1.76 1.95 1.15 4.99-0.792 6.57-2.59 2.1-6.43 1.28-8.38-1.28-2.45-3.22-1.42-7.87 1.76-10.2 3.85-2.8 9.31-1.56 12 2.24 3.16 4.48 1.69 10.8-2.73 13.8-5.11 3.52-12.2 1.83-15.6-3.21-3.87-5.73-1.97-13.6 3.7-17.4 6.36-4.23 15.1-2.11 19.2 4.18 4.59 6.98 2.25 16.5-4.67 21-7.61 4.95-18 2.39-22.8-5.15-5.31-8.24-2.53-19.4 5.64-24.6 3.72-2.38 8.23-3.36 12.6-2.78" fill="#3760a5"/>
 </g>
</svg>
"##;

const KOEDEM_OFF_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <g fill="none" stroke="#000" stroke-width=".1">
 <path transform="rotate(-60)" d="m-0.961 3.14c-0.0707-0.105-0.192-0.174-0.328-0.174l-2.61 9.67e-4c-0.218 0-0.393 0.175-0.393 0.394l1.43e-4 4.71c0 0.15 0.0817 0.28 0.205 0.346-0.0146-0.0729-0.0112-0.151 0.0189-0.225l1.77-4.37c0.0818-0.202 0.312-0.3 0.515-0.218l0.895 0.363 1.95e-4 -0.609c0-0.0819-0.0242-0.158-0.0666-0.221z" stroke-linejoin="round"/>
 <path d="m2.11 3.82-0.0918 0.158-0.215-0.115-0.146 0.254 0.207 0.129-0.143 0.246 0.254 0.146 0.139-0.238 0.281 0.176c-0.0081 0.00151-0.0173 0.00396-0.0254 0.00586-0.379 0.0894-0.707 0.356-0.643 0.73 0.0651 0.376 0.552 0.658 1.04 0.471 0.274-0.106 0.528-0.195 0.748-0.0566l-0.156 0.385 0.316 0.182 0.15-0.262-0.635-0.812c-0.119 0.0952-0.337 0.22-0.559 0.244-0.217 0.0237-0.46-0.0782-0.492-0.225-0.0325-0.146 0.141-0.317 0.355-0.322 0.203-0.00498 0.392 0.0459 0.541 0.104l-0.67-0.857-0.0859-0.0449 0.0215-0.0371-0.139-0.178c-0.02-0.0257-0.036-0.0537-0.0488-0.082z"/>
 <path transform="rotate(-38)" d="m2.52 4.08c-0.0629-0.0424-0.139-0.0661-0.221-0.0661l-2.61-0.00107c-0.218 0-0.395 0.177-0.395 0.395l-3.45e-4 4.71c0 0.148 0.0833 0.275 0.203 0.342-0.0137-0.0719-0.00802-0.148 0.0216-0.221l1.77-4.37c0.0818-0.202 0.312-0.299 0.515-0.218l0.895 0.362 3.02e-4 -0.609c0-0.136-0.0689-0.256-0.174-0.327z" stroke-linejoin="round"/>
 <path d="m3.7 2.88-0.23 0.18 0.145 0.197-0.227 0.176 0.182 0.232 0.217-0.172 0.195 0.27c-0.00807-0.00164-0.0172-0.00263-0.0254-0.00391-0.385-0.0591-0.789 0.0659-0.869 0.438-0.0804 0.373 0.265 0.817 0.783 0.824 0.293 0.00429 0.563 0.0178 0.715 0.229l-0.289 0.297 0.225 0.287 0.238-0.186-0.283-0.992c-0.145 0.0441-0.396 0.0783-0.611 0.0176-0.21-0.0593-0.396-0.245-0.371-0.393 0.0247-0.148 0.248-0.242 0.449-0.166 0.19 0.0713 0.347 0.19 0.463 0.299l-0.301-1.05-0.0605-0.0723 0.0332-0.0254-0.0625-0.219c-0.00921-0.0321-0.0126-0.0638-0.0137-0.0957l-0.145 0.113-0.156-0.188z"/>
 <path transform="rotate(-16)" d="m6.1 3.65c-0.0257-0.00523-0.0521-0.00651-0.0794-0.00651l-2.61-8.78e-4c-0.218 0-0.396 0.176-0.396 0.395l7.04e-5 4.71c0 0.149 0.0819 0.278 0.204 0.345-0.0146-0.0729-0.00811-0.151 0.0219-0.225l1.76-4.37c0.0818-0.202 0.311-0.3 0.514-0.218l0.896 0.362 4.43e-5 -0.61c0-0.191-0.134-0.35-0.314-0.387z" stroke-linejoin="round"/>
 <path d="m5.82 2.67-0.281 0.0801 0.0586 0.236-0.273 0.0801 0.0801 0.281 0.268-0.0762 0.0781 0.322c-0.00687-0.00454-0.0143-0.00941-0.0215-0.0137-0.335-0.199-0.757-0.234-0.971 0.0801-0.214 0.316-0.0593 0.856 0.418 1.06 0.27 0.114 0.516 0.228 0.578 0.48l-0.379 0.166 0.0996 0.352 0.291-0.084 0.109-1.03c-0.151-0.0136-0.397-0.076-0.574-0.213-0.172-0.134-0.276-0.374-0.197-0.502 0.0784-0.128 0.32-0.132 0.479 0.0137 0.15 0.138 0.251 0.308 0.318 0.453l0.113-1.09-0.0293-0.0898 0.041-0.0117 0.0234-0.225c0.0034-0.0323 0.011-0.0645 0.0215-0.0938l-0.176 0.0508-0.0742-0.232z"/>
 <rect transform="rotate(6)" x="6.33" y="1.9" width="3.4" height="5.5" ry=".394" stroke-linejoin="round"/>
 <path d="m7.58 3.24 0.291 0.0306-0.018 0.244 0.284 0.0298-0.0306 0.291-0.275-0.0289-0.0214 0.331q0.00896-0.00855 0.0184-0.0167c0.295-0.254 0.704-0.363 0.97-0.0903 0.266 0.274 0.207 0.832-0.228 1.11-0.247 0.159-0.469 0.314-0.486 0.573l0.403 0.0981-0.0383 0.364-2.04-0.214 0.0383-0.364 0.414-0.0123c0.0372-0.257-0.148-0.455-0.356-0.662-0.367-0.365-0.308-0.924 0.00835-1.14 0.316-0.212 0.694-0.0201 0.93 0.29q0.00755 0.00995 0.0146 0.0201l0.048-0.329-0.275-0.0289 0.0306-0.291 0.284 0.0298zm-0.392 1.09c0.147 0.31 0.135 0.654 0.12 0.802-0.0893-0.00938-0.41-0.193-0.563-0.454-0.11-0.188-0.116-0.452 0.00453-0.541 0.121-0.0892 0.347-0.00103 0.439 0.193zm0.841 0.0884c-0.209 0.273-0.268 0.612-0.284 0.76 0.0893 0.00938 0.441-0.103 0.645-0.328 0.147-0.162 0.207-0.418 0.108-0.53-0.0994-0.112-0.339-0.0731-0.469 0.0976z"/>
 </g>
</svg>
"##;
const KOEDEM_ON_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <g>
  <g transform="matrix(.395 -.685 .685 .395 -1.75 6.55)">
   <rect x="2.85" y="1.52" width="4.3" height="6.96" ry=".499" stroke="#000" stroke-linejoin="round" stroke-width=".253"/>
   <path d="m4.81 2.19h0.371l0.00964 0.309h0.361v0.371h-0.35l0.0169 0.42q0.0101-0.0119 0.021-0.0234c0.338-0.359 0.838-0.55 1.21-0.242 0.371 0.309 0.371 1.02-0.14 1.43-0.289 0.233-0.548 0.457-0.535 0.786l0.52 0.0702v0.464h-2.59v-0.464l0.52-0.0702c0.0128-0.328-0.246-0.553-0.535-0.786-0.51-0.411-0.51-1.12-0.14-1.43 0.37-0.308 0.87-0.117 1.21 0.242q0.0108 0.0115 0.021 0.0234l0.0169-0.42h-0.35v-0.371h0.361zm-0.349 1.42c0.227 0.371 0.257 0.805 0.257 0.994-0.114 0-0.542-0.188-0.768-0.497-0.163-0.223-0.206-0.553-0.0658-0.681 0.14-0.128 0.436-0.0471 0.578 0.185zm1.07 0c-0.227 0.371-0.257 0.805-0.257 0.994 0.114 0 0.542-0.188 0.768-0.497 0.163-0.223 0.206-0.553 0.0658-0.681-0.14-0.128-0.436-0.0471-0.578 0.185z" fill="#fff" fill-rule="evenodd"/>
  </g>
  <g transform="matrix(.623 -.487 .487 .623 -.6 4.03)">
   <rect x="2.85" y="1.52" width="4.3" height="6.96" ry=".499" fill="#fff" stroke="#000" stroke-linejoin="round" stroke-width=".253"/>
   <path d="m4.81 2.19h0.371l0.00964 0.309h0.361v0.371h-0.35l0.0169 0.42q0.0101-0.0119 0.021-0.0234c0.338-0.359 0.838-0.55 1.21-0.242 0.371 0.309 0.371 1.02-0.14 1.43-0.289 0.233-0.548 0.457-0.535 0.786l0.52 0.0702v0.464h-2.59v-0.464l0.52-0.0702c0.0128-0.328-0.246-0.553-0.535-0.786-0.51-0.411-0.51-1.12-0.14-1.43 0.37-0.308 0.87-0.117 1.21 0.242q0.0108 0.0115 0.021 0.0234l0.0169-0.42h-0.35v-0.371h0.361zm-0.349 1.42c0.227 0.371 0.257 0.805 0.257 0.994-0.114 0-0.542-0.188-0.768-0.497-0.163-0.223-0.206-0.553-0.0658-0.681 0.14-0.128 0.436-0.0471 0.578 0.185zm1.07 0c-0.227 0.371-0.257 0.805-0.257 0.994 0.114 0 0.542-0.188 0.768-0.497 0.163-0.223 0.206-0.553 0.0658-0.681-0.14-0.128-0.436-0.0471-0.578 0.185z" fill-rule="evenodd"/>
  </g>
  <g transform="matrix(.76 -.218 .218 .76 1.41 2.13)">
   <rect x="2.85" y="1.52" width="4.3" height="6.96" ry=".499" stroke="#000" stroke-linejoin="round" stroke-width=".253"/>
   <path d="m4.81 2.19h0.371l0.00964 0.309h0.361v0.371h-0.35l0.0169 0.42q0.0101-0.0119 0.021-0.0234c0.338-0.359 0.838-0.55 1.21-0.242 0.371 0.309 0.371 1.02-0.14 1.43-0.289 0.233-0.548 0.457-0.535 0.786l0.52 0.0702v0.464h-2.59v-0.464l0.52-0.0702c0.0128-0.328-0.246-0.553-0.535-0.786-0.51-0.411-0.51-1.12-0.14-1.43 0.37-0.308 0.87-0.117 1.21 0.242q0.0108 0.0115 0.021 0.0234l0.0169-0.42h-0.35v-0.371h0.361zm-0.349 1.42c0.227 0.371 0.257 0.805 0.257 0.994-0.114 0-0.542-0.188-0.768-0.497-0.163-0.223-0.206-0.553-0.0658-0.681 0.14-0.128 0.436-0.0471 0.578 0.185zm1.07 0c-0.227 0.371-0.257 0.805-0.257 0.994 0.114 0 0.542-0.188 0.768-0.497 0.163-0.223 0.206-0.553 0.0658-0.681-0.14-0.128-0.436-0.0471-0.578 0.185z" fill="#fff" fill-rule="evenodd"/>
  </g>
  <g transform="matrix(.786 .0826 -.0826 .786 3.98 1.12)">
   <rect x="2.85" y="1.52" width="4.3" height="6.96" ry=".499" fill="#fff" stroke="#000" stroke-linejoin="round" stroke-width=".253"/>
   <path d="m4.81 2.19h0.371l0.00964 0.309h0.361v0.371h-0.35l0.0169 0.42q0.0101-0.0119 0.021-0.0234c0.338-0.359 0.838-0.55 1.21-0.242 0.371 0.309 0.371 1.02-0.14 1.43-0.289 0.233-0.548 0.457-0.535 0.786l0.52 0.0702v0.464h-2.59v-0.464l0.52-0.0702c0.0128-0.328-0.246-0.553-0.535-0.786-0.51-0.411-0.51-1.12-0.14-1.43 0.37-0.308 0.87-0.117 1.21 0.242q0.0108 0.0115 0.021 0.0234l0.0169-0.42h-0.35v-0.371h0.361zm-0.349 1.42c0.227 0.371 0.257 0.805 0.257 0.994-0.114 0-0.542-0.188-0.768-0.497-0.163-0.223-0.206-0.553-0.0658-0.681 0.14-0.128 0.436-0.0471 0.578 0.185zm1.07 0c-0.227 0.371-0.257 0.805-0.257 0.994 0.114 0 0.542-0.188 0.768-0.497 0.163-0.223 0.206-0.553 0.0658-0.681-0.14-0.128-0.436-0.0471-0.578 0.185z" fill-rule="evenodd"/>
  </g>
 </g>
</svg>
"##;

const DUPLICATE_OFF_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <path style="display:inline;fill:#000000;fill-opacity:0;stroke:#000000;stroke-width:0.1;stroke-opacity:1;stroke-dasharray:none" d="m 5.2739453,5.369559 h -0.55859 c 0,-1.0261972 0.3111397,-2.0498553 0.9994279,-2.7994021 a 0.88633841,0.88633841 0 1 0 -1.3478057,0.096055 c -0.5536186,0.394718 -1.5826723,1.4526536 -1.5826723,2.7771892 0,1.3367002 1.0479915,1.8778345 1.5974822,1.9889183 L 2.3411366,7.7931802 V 8.8405363 H 7.6588634 V 7.7931802 L 5.569533,7.4267101 C 6.1255606,7.3044155 7.141874,6.7594707 7.141874,5.4431883 7.141874,4.5812878 6.7398771,3.8129098 6.251554,3.2543201 5.7147832,3.6734741 5.2739453,4.6511109 5.2739453,5.3695553 Z"/>
</svg>
"##;
const DUPLICATE_ON_ICON: &str = r##"
<svg class="rule-variant-icon" viewBox="0 0 10 10">
 <g>
  <g transform="translate(-0.3998634,0.40023639)">
   <path style="display:inline;fill:#262626;fill-opacity:1;stroke:#000000;stroke-width:0.2;stroke-dasharray:none;stroke-opacity:1" d="m 6.0738087,4.5690771 h -0.55859 c 0,-1.0261972 0.3111397,-2.0498553 0.9994279,-2.7994021 A 0.88633841,0.88633841 0 1 0 5.1668409,1.86573 C 4.6132223,2.260448 3.5841686,3.3183836 3.5841686,4.6429192 c 0,1.3367002 1.0479915,1.8778345 1.5974822,1.9889183 L 3.141,6.9926983 V 8.0400544 H 8.4587268 V 6.9926983 L 6.3693964,6.6262282 c 0.5560276,-0.1222946 1.572341,-0.6672394 1.572341,-1.9835218 0,-0.8619005 -0.4019969,-1.6302785 -0.89032,-2.1888682 C 6.5146466,2.8729922 6.0738087,3.850629 6.0738087,4.5690734 Z" />
   <path style="display:inline;fill:#e4e4e4;fill-opacity:1;stroke:#000000;stroke-width:0.200005;stroke-dasharray:none;stroke-opacity:1" d="M 5.2739591,5.3695496 H 4.7153409 c 0,-1.0261965 0.3111554,-2.0498539 0.9994784,-2.7994002 A 0.88638312,0.88633784 0 1 0 4.3669456,2.6662043 C 3.813299,3.060922 2.7841934,4.118857 2.7841934,5.4433917 c 0,1.3366993 1.0480444,1.8778333 1.5975628,1.988917 L 2.3410025,7.7931693 v 1.0473554 h 5.317995 V 7.7931693 L 5.5695617,7.4266994 C 6.1256174,7.3044049 7.141982,6.7594604 7.141982,5.4431789 7.141982,4.581279 6.7399649,3.8129015 6.2516171,3.2543121 5.7148193,3.6734658 5.2739591,4.651102 5.2739591,5.3695459 Z" />
  </g>
 </g>
</svg>
"##;

struct VariantButtonState {
    value: String,
    caption: String,
    icon: String,
}

struct VariantButton {
    name: String,
    states: Vec<VariantButtonState>,
    tooltip: Option<web_sys::Element>,
}

struct RuleNode {
    name: String,
    label: String,
    input: Option<web_sys::Element>,
    tooltip: Option<web_sys::Element>,
}

impl VariantButtonState {
    fn new(value: impl Into<String>, caption: impl Into<String>, icon: impl Into<String>) -> Self {
        Self {
            value: value.into(),
            caption: caption.into(),
            icon: icon.into(),
        }
    }
}

impl VariantButton {
    fn new(name: impl Into<String>, states: Vec<VariantButtonState>) -> Self {
        Self { name: name.into(), states, tooltip: None }
    }

    fn with_tooltip(mut self, node: web_sys::Element) -> Self {
        self.tooltip = Some(node);
        self
    }

    // TODO: Change icon, text and style rather than swapping the whole button: this would make
    // focus management less chaotic.
    // TODO: Switch to the previous state on right-click (will only become relevant when we have
    // buttons with 3+ states though).
    fn to_element(&self) -> JsResult<web_sys::Element> {
        let state_id = |idx| format!("rule-variant-button-{}-{}", self.name, idx);
        let node = web_document().create_element("div")?;
        for (i, st) in self.states.iter().enumerate() {
            let id = state_id(i);
            let _prev_id = state_id((i + self.states.len() - 1) % self.states.len());
            let next_id = state_id((i + 1) % self.states.len());
            let class_on_off = if i > 0 { "rule-variant-on" } else { "rule-variant-off" };
            let button_node = node.new_child_element("button")?;
            button_node.set_id(&id);
            button_node.set_attribute("type", "button")?;
            button_node.class_list().add_2("rule-variant-button", class_on_off)?;
            if i != 0 {
                button_node.set_displayed(false)?;
            }
            button_node.set_attribute("data-variant-name", &self.name)?;
            button_node.set_attribute("data-variant-value", &st.value)?;
            button_node.set_inner_html(&st.icon);
            let caption_node = button_node.new_child_element("div")?;
            caption_node.set_class_name("rule-variant-button-caption");
            caption_node.set_text_content(Some(&st.caption));
            button_node.add_event_listener_and_forget("click", move |_: web_sys::Event| {
                let document = web_document();
                let button_node = document.get_existing_element_by_id(&id)?;
                let next_button_node = document.get_existing_element_by_id(&next_id)?;
                button_node.set_displayed(false)?;
                next_button_node.set_displayed(true)?;
                update_new_match_rules_body()?;
                Ok(())
            })?;
        }
        if let Some(tooltip) = &self.tooltip {
            node.new_child_tooltip(TooltipPosition::Below, TooltipWidth::L)?
                .append_child(tooltip)?;
        }
        Ok(node)
    }
}

impl RuleNode {
    fn new(name: impl Into<String>, label: impl Into<String>) -> Self {
        Self {
            name: name.into(),
            label: label.into(),
            input: None,
            tooltip: None,
        }
    }

    fn input_id(&self) -> String { format!("rule-input-{}", self.name) }
    fn class(&self) -> String { rule_setting_class(&self.name) }

    fn with_input_select<S1: fmt::Display, S2: fmt::Display>(
        mut self, options: impl IntoIterator<Item = (S1, S2)>,
    ) -> JsResult<Self> {
        let node = web_document().create_element("select")?;
        node.set_id(&self.input_id());
        node.set_attribute("name", &self.name)?;
        node.class_list().add_1(&self.class())?;
        for (value, label) in options {
            let option_node = node.new_child_element("option")?;
            option_node.set_attribute("value", &value.to_string())?;
            option_node.set_text_content(Some(&label.to_string()));
        }
        node.add_event_listener_and_forget("change", move |_: web_sys::Event| {
            update_new_match_rules_body()
        })?;
        self.input = Some(node);
        Ok(self)
    }

    fn with_input_text(
        mut self, pattern: impl fmt::Display, placeholder: impl fmt::Display,
    ) -> JsResult<Self> {
        let node = web_document().create_element("input").unwrap();
        node.set_id(&self.input_id());
        node.set_attribute("type", "text")?;
        node.set_attribute("name", &self.name)?;
        node.set_attribute("class", &self.class())?;
        node.set_attribute("pattern", &pattern.to_string())?;
        node.set_attribute("placeholder", &placeholder.to_string())?;
        node.set_attribute("spellcheck", "false")?;
        node.set_attribute("autocomplete", "off")?;
        node.set_attribute("required", "")?;
        node.add_event_listener_and_forget("change", move |_: web_sys::Event| {
            update_new_match_rules_body()
        })?;
        self.input = Some(node);
        Ok(self)
    }

    fn with_tooltip(mut self, node: web_sys::Element) -> JsResult<Self> {
        self.tooltip = Some(standalone_tooltip(node, [self.class().as_str()])?);
        Ok(self)
    }

    fn to_elements(&self) -> JsResult<[web_sys::Element; 3]> {
        let label_node = web_document().create_element("label")?;
        label_node.set_attribute("for", &self.input_id())?;
        label_node.set_attribute("class", &self.class())?;
        label_node.set_text_content(Some(&self.label));
        let input_node = self.input.clone().unwrap();
        let tooltip_node = if let Some(tooltip) = &self.tooltip {
            tooltip.clone()
        } else {
            web_document().create_element("div")?.with_classes([self.class().as_str()])?
        };
        Ok([label_node, input_node, tooltip_node])
    }
}

fn preset_button(
    preset: RulesPreset, label: &str, tooltip: web_sys::Element,
) -> JsResult<web_sys::Element> {
    let button = web_document().create_element("button")?;
    button.set_attribute("type", "button")?;
    button.set_attribute("value", preset.as_ref())?;
    button.class_list().add_1("rule-preset-button")?;
    button.set_text_content(Some(label));
    button.add_event_listener_and_forget("click", move |_: web_sys::Event| {
        new_match_apply_preset(preset)
    })?;
    button
        .new_child_tooltip(TooltipPosition::Below, TooltipWidth::L)?
        .append_child(&tooltip)?;
    Ok(button)
}

fn set_input_value(name: &str, value: &str) -> JsResult<()> {
    web_document()
        .query_selector_existing(&format!("[name='{name}']"))?
        .dyn_into::<web_sys::HtmlInputElement>()?
        .set_value(value);
    Ok(())
}

fn set_select_value(name: &str, value: &str) -> JsResult<()> {
    web_document()
        .query_selector_existing(&format!("[name='{name}']"))?
        .dyn_into::<web_sys::HtmlSelectElement>()?
        .set_value(value);
    Ok(())
}

fn activate_variant_button_value(name: &str, value: &str) -> JsResult<()> {
    let buttons = web_document().query_selector_all(&format!("[data-variant-name='{name}']"))?;
    let mut num_visible = 0;
    for button in buttons {
        let button = button.dyn_into::<web_sys::Element>()?;
        let is_visible = button.get_attribute("data-variant-value").as_deref() == Some(value);
        button.set_displayed(is_visible)?;
        num_visible += is_visible as u32;
    }
    if num_visible != 1 {
        panic!("Bad value for variant button {name}: {value}");
    }
    Ok(())
}

fn activate_preset_button(preset: Option<RulesPreset>) -> JsResult<()> {
    for button in web_document().get_elements_by_class_name("rule-preset-button") {
        let is_active =
            button.get_attribute("value").as_deref() == preset.as_ref().map(|p| p.as_ref());
        button.class_list().toggle_with_force("rule-variant-on", is_active)?;
        button.class_list().toggle_with_force("rule-variant-off", !is_active)?;
    }
    Ok(())
}

fn rule_setting_class(name: &str) -> String { format!("rule-setting-{}", name) }

fn standalone_tooltip<'a>(
    tooltip_body: web_sys::Element, additional_classes: impl IntoIterator<Item = &'a str>,
) -> JsResult<web_sys::Element> {
    let node = web_document()
        .create_element("div")?
        .with_classes(["tooltip-standalone"])?
        .with_classes(additional_classes)?;
    node.new_child_tooltip(TooltipPosition::Right, TooltipWidth::M)?
        .append_child(&tooltip_body)?;
    Ok(node)
}

fn combine_elements(
    nodes: impl IntoIterator<Item = web_sys::Element>,
) -> JsResult<web_sys::Element> {
    let parent_node = web_document().create_element("div")?;
    for node in nodes {
        parent_node.append_child(&node)?;
    }
    Ok(parent_node)
}

fn accolade_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Accolade.")?
            .with_more_text(
                " Combine a Knight with a Bishop, a Rook or a Queen
            to get a Cardinal, an Empress or an Amazon respectively.
            Combine by moving one piece onto another or by dropping one piece onto another.
            If captured, the piece falls back apart.",
            )?,
    ])
}

fn fischer_random_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Fischer random (Chess960). ")?
            .with_more_text(
                "Pawns start as usual. Pieces start on the home ranks, but their
            positions are randomized. Bishops are always of opposite colors.
            King always starts between the rooks. Castling is allowed:
            A-side castling puts the kind and left rook on files C and\u{00a0}D respectively,
            H-side castling puts the kind and right rook on files G and\u{00a0}F respectively.
            All four players start with the same setup.",
            )?,
    ])
}

fn duck_chess_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Duck chess.")?
            .with_more_text(
                " A duck occupies one square on the board and cannot be captured.
            Each move consists of two parts. First, a regular bughouse move.
            Second, moving the duck to any free square on the board. Quack!",
            )?,
    ])
}

fn fog_of_war_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Fog of war (Dark chess).")?
            .with_more_text(
                " You only see squares where your pieces can legally move.
            You can drop pieces into the fog of war at your own risk.",
            )?,
    ])
}

fn koedem_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Koedem.")?
            .with_more_text(
                " Kings can be captured. Upon receiving a king, you must play it immediately.
            The game ends when one team accumulates all four kings
            or when time runs out on any board.",
            )?,
    ])
}

fn duplicate_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Duplicate.")?
            .with_more_text(
                " Pieces taken by one player are returned to the reserve of both players.",
            )?,
    ])
}

fn starting_time_tooltip(max_starting_time: Option<Duration>) -> JsResult<Vec<web_sys::Element>> {
    let mut paragraphs =
        vec![web_document().create_element("p")?.with_text_content(
            "Starting time in “m:ss” format. There are no increments or delays.",
        )];
    if let Some(max_starting_time) = max_starting_time {
        paragraphs.push(web_document().create_element("p")?.with_text_content(&format!(
            "Must not exceed {}.",
            duration_to_mss(max_starting_time)
        )));
    }
    Ok(paragraphs)
}

fn promotion_upgrade_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Upgrade.")?
            .with_more_text(
                " Regular promotion rules.
            Turn the pawn into a Queen, a Rook, a Bishop or a Knight.
            If captured, the piece goes into reserve as a pawn.",
            )?,
    ])
}
fn promotion_discard_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Discard.")?
            .with_more_text(
                " Upon reaching the last rank the pawn is lost and goes to your opponent's reserve.
            You get nothing. C'est la vie.",
            )?,
    ])
}
fn promotion_steal_general_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document().create_element("p")?.with_more_text_i("Steal.")?.with_more_text(
            " Expropriate your partner opponent's piece when promoting a pawn!
            Can only steal a piece from the board, not from reserve.
            Cannot expose a king to new attacks by stealing a piece
            unless regicide is on (i.e. unless king capture is allowed by
            chess variant like Fog of war or Duck chess).",
        )?,
    ])
}
fn promotion_steal_specific_tooltip(rules: &ChessRules) -> JsResult<Vec<web_sys::Element>> {
    let exposure = if rules.regicide() {
        "It is possible to expose a king to new attacks by stealing a piece
        since regicide is on."
    } else {
        "Cannot expose a king to new attacks by stealing a piece."
    };
    Ok(vec![
        web_document().create_element("p")?.with_more_text_i("Steal.")?.with_more_text(
            &format!(
                " Expropriate your partner opponent's piece when promoting a pawn!
                Can only steal a piece from the board, not from reserve. {exposure}",
            ),
        )?,
    ])
}

fn drop_aggression_no_check_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("No check.")?
            .with_more_text(" Drop with a check is forbidden.")?,
    ])
}
fn drop_aggression_no_chess_mate_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("No mate.")?
            .with_more_text(
                " Drop with a checkmate is forbidden, even if the opponent can escape
            the checkmate with a drop of their own.",
            )?,
    ])
}
fn drop_aggression_no_bughouse_mate_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("No bughouse mate.")?
            .with_more_text(
                " Drop with a checkmate is forbidden, unless the opponent can escape
            the checkmate with a drop of their own (even if their reserve
            is currently empty).",
            )?,
    ])
}
fn drop_aggression_mate_allowed_tooltip() -> JsResult<Vec<web_sys::Element>> {
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Mate allowed.")?
            .with_more_text(" Drop with a checkmate is allowed.")?,
    ])
}

// Improvement potential: Update based on the current board shape.
fn pawn_drop_rank_general_tooltip() -> JsResult<Vec<web_sys::Element>> {
    let first = web_document().create_element("p")?.with_more_text(
        "Allowed pawn drop ranks in “min-max” format.
        Ranks are counted starting from the player, so “2-6” means
        White can drop from rank 2 to rank 6 and Black can drop
        from rank 7 to rank 3.",
    )?;
    let second = web_document().create_element("p")?;
    second.append_with_str_1("Limitations:")?;
    second.new_child_element("br")?;
    second.append_with_str_1("1 ≤ min ≤ max ≤ 7")?;
    Ok(vec![first, second])
}
fn pawn_drop_rank_specific_tooltip(
    board_shape: BoardShape, min: SubjectiveRow, max: SubjectiveRow,
) -> JsResult<Vec<web_sys::Element>> {
    let white_min = min.to_row(board_shape, Force::White).to_algebraic(board_shape);
    let white_max = max.to_row(board_shape, Force::White).to_algebraic(board_shape);
    let black_min = max.to_row(board_shape, Force::Black).to_algebraic(board_shape);
    let black_max = min.to_row(board_shape, Force::Black).to_algebraic(board_shape);
    let mut message = if white_min == black_min && white_max == black_max {
        format!("Pawns can be dropped on ranks {white_min} to {white_max}.")
    } else {
        format!(
            "White can drop pawns on ranks {white_min} to {white_max}.
            Black can drop pawns on ranks {black_max} to {black_min}.",
        )
    };
    match min.to_one_based() {
        1 => message.push_str(
            " Pawns on the first or the second rank from the player can always move two squares.",
        ),
        2 => message
            .push_str(" Pawns on the second rank from the player can always move two squares."),
        _ => {}
    };
    Ok(vec![web_document().create_element("p")?.with_more_text(&message)?])
}

fn regicide_general_tooltip() -> JsResult<Vec<web_sys::Element>> {
    let regicide_variants = ChessVariant::iter()
        .filter(|v| v.enables_regicide())
        .map(|v| v.to_human_readable())
        .join(", ");
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Regicide.")?
            .with_more_text(
                " Capture opponent's king in order to win the game.
            There are no checks and checkmates. Drop aggression is always “Mate Allowed”.
            Attacking the king does not prevent castling.",
            )?,
        web_document().create_element("p")?.with_more_text(&format!(
            "This option is enabled when any of these variants is on: {regicide_variants}."
        ))?,
    ])
}
fn regicide_specific_tooltip(rules: &ChessRules) -> JsResult<Vec<web_sys::Element>> {
    let variants = rules.regicide_reason();
    let prefix = match variants.len() {
        0 => return Err(rust_error!("Regicide is on, but regicide reason list is empty")),
        1 => "this chess variant: ",
        _ => "these chess variants: ",
    };
    Ok(vec![
        web_document()
            .create_element("p")?
            .with_more_text_i("Regicide.")?
            .with_more_text(
                " Capture opponent's king in order to win the game.
            There are no checks and checkmates. Drop aggression is always “Mate Allowed”.
            Attacking the king does not prevent castling.",
            )?,
        web_document().create_element("p")?.with_more_text(&format!(
            "This option is enabled because of {}{}.",
            prefix,
            variants.iter().map(|v| v.to_human_readable()).join(", ")
        ))?,
    ])
}

fn preset_international_tooltip(time_control: &str) -> JsResult<web_sys::Element> {
    combine_elements([
        web_document()
            .create_element("p")?
            .with_more_text_i("International preset. ")?
            .with_more_text(&format!(
                "Classic bughouse ruleset with {time_control} time control."
            ))?,
        web_document().create_element("p")?.with_more_text(
            "Standard starting position and promotion rules.
            Can drop mate, can drop pawns one move away from promotion,
            so even a few reserve pieces can create a lot of pressure.",
        )?,
    ])
}

fn preset_modern_tooltip() -> JsResult<web_sys::Element> {
    combine_elements([
        web_document()
            .create_element("p")?
            .with_more_text_i("Modern preset. ")?
            .with_more_text("Slower and more varied games.")?,
        web_document().create_element("p")?.with_more_text(
            "Random starting positions.
            Stealing promotion opens new avenues of attack and defense.
            Cannot drop mate, pawns have to be dropped at least two
            moves away from promotion, so attacks are less fierce.",
        )?,
    ])
}

pub fn make_new_match_rules_body(server_options: &ServerOptions) -> JsResult<()> {
    let document = web_document();
    let rules_node = document.get_existing_element_by_id("menu-create-match-rules")?;
    if rules_node.child_element_count() > 0 {
        // Only create the page once, because we leak the closures.
        return Ok(());
    }
    let presets_node = rules_node.new_child_element("div")?.with_id("create-match-rule-presets");
    let variants_node = rules_node.new_child_element("div")?.with_id("create-match-rule-variants");
    let details_node = rules_node
        .new_child_element("div")?
        .with_id("create-match-rule-details")
        .with_classes(["menu-page-body"])?;

    presets_node.remove_all_children();
    presets_node.append_text_span("Preset:", ["presets-label"])?;
    presets_node.append_element(preset_button(
        RulesPreset::International3,
        "Interntl 3m",
        preset_international_tooltip("3+0")?,
    )?)?;
    presets_node.append_element(preset_button(
        RulesPreset::International5,
        "Interntl 5m",
        preset_international_tooltip("5+0")?,
    )?)?;
    presets_node.append_element(preset_button(
        RulesPreset::Modern,
        "Modern",
        preset_modern_tooltip()?,
    )?)?;

    variants_node.remove_all_children();
    variants_node.append_element(
        VariantButton::new(FAIRY_PIECES, vec![
            VariantButtonState::new("off", "Standard pieces", ACCOLADE_OFF_ICON),
            // VariantButtonState::new("capablanca", "Capablanca", PLACEHOLDER_ICON),
            VariantButtonState::new("accolade", "Accolade", ACCOLADE_ON_ICON),
        ])
        .with_tooltip(combine_elements(accolade_tooltip()?)?)
        .to_element()?,
    )?;
    variants_node.append_element(
        VariantButton::new(STARTING_POSITION, vec![
            VariantButtonState::new("off", "Classic setup", FISCHER_RANDOM_OFF_ICON),
            VariantButtonState::new("fischer-random", "Fischer random", FISCHER_RANDOM_ON_ICON),
        ])
        .with_tooltip(combine_elements(fischer_random_tooltip()?)?)
        .to_element()?,
    )?;
    variants_node.append_element(
        VariantButton::new(DUCK_CHESS, vec![
            VariantButtonState::new("off", "No duck", DUCK_CHESS_OFF_ICON),
            VariantButtonState::new("on", "Duck chess", DUCK_CHESS_ON_ICON),
        ])
        .with_tooltip(combine_elements(duck_chess_tooltip()?)?)
        .to_element()?,
    )?;
    variants_node.append_element(
        VariantButton::new(FOG_OF_WAR, vec![
            VariantButtonState::new("off", "No fog of war", FOG_OF_WAR_OFF_ICON),
            VariantButtonState::new("on", "Fog of war", FOG_OF_WAR_ON_ICON),
        ])
        .with_tooltip(combine_elements(fog_of_war_tooltip()?)?)
        .to_element()?,
    )?;
    variants_node.append_element(
        VariantButton::new(KOEDEM, vec![
            VariantButtonState::new("off", "No koedem", KOEDEM_OFF_ICON),
            VariantButtonState::new("on", "Koedem", KOEDEM_ON_ICON),
        ])
        .with_tooltip(combine_elements(koedem_tooltip()?)?)
        .to_element()?,
    )?;
    variants_node.append_element(
        VariantButton::new(DUPLICATE, vec![
            VariantButtonState::new("off", "No duplicate", DUPLICATE_OFF_ICON),
            VariantButtonState::new("on", "Duplicate", DUPLICATE_ON_ICON),
        ])
        .with_tooltip(combine_elements(duplicate_tooltip()?)?)
        .to_element()?,
    )?;

    details_node.remove_all_children();
    details_node.append_children(
        RuleNode::new(STARTING_TIME, "Starting time")
            .with_input_text("[0-9]+:[0-5][0-9]", "m:ss")?
            .with_tooltip(combine_elements(starting_time_tooltip(
                server_options.max_starting_time,
            )?)?)?
            .to_elements()?,
    )?;
    details_node.append_children(
        RuleNode::new(PROMOTION, "Promotion")
            .with_input_select([("upgrade", "Upgrade"), ("steal", "Steal")])?
            .with_tooltip(combine_elements(
                [
                    promotion_upgrade_tooltip()?,
                    promotion_steal_general_tooltip()?,
                ]
                .into_iter()
                .flatten(),
            )?)?
            .to_elements()?,
    )?;
    details_node.append_children(
        RuleNode::new(PAWN_DROP_RANKS, "Pawn drop ranks")
            .with_input_text("1-[1-7]|2-[2-7]|3-[3-7]|4-[4-7]|5-[5-7]|6-[6-7]|7-[7-7]", "min-max")?
            .with_tooltip(combine_elements(pawn_drop_rank_general_tooltip()?)?)?
            .to_elements()?,
    )?;
    details_node.append_children(
        RuleNode::new(DROP_AGGRESSION, "Drop aggression")
            .with_input_select([
                ("no-check", "No check"),
                ("no-chess-mate", "No mate"),
                ("mate-allowed", "Mate allowed"),
            ])?
            .with_tooltip(combine_elements(
                [
                    drop_aggression_no_check_tooltip()?,
                    drop_aggression_no_chess_mate_tooltip()?,
                    drop_aggression_mate_allowed_tooltip()?,
                ]
                .into_iter()
                .flatten(),
            )?)?
            .to_elements()?,
    )?;
    {
        let node = document.create_element("div")?.with_classes([
            "grid-col-span-2",
            "flex-row",
            "gap-medium",
            REGICIDE_CLASS,
        ])?;
        node.set_inner_html(REGICIDE_ICON);
        node.append_child(
            &document
                .create_element("div")?
                .with_classes(["inline-block"])?
                .with_text_content("Regicide: no checks and mates"),
        )?;
        details_node.append_children([
            node,
            standalone_tooltip(combine_elements(regicide_general_tooltip()?)?, [REGICIDE_CLASS])?,
        ])?;
    }

    new_match_apply_preset(RulesPreset::Modern)?;
    Ok(())
}

// TODO: Show preset, if any.
pub fn make_readonly_rules_body(rules: &Rules) -> JsResult<web_sys::Element> {
    // Note: Use a table rather than two independent blocks with valign=top in order to align the
    // caption with the baseline of the first variant.
    let variants: JsResult<Vec<_>> = rules
        .chess_rules
        .variants()
        .into_iter()
        .map(|variant| {
            use ChessVariant::*;
            let (icon, tooltip) = match variant {
                Capablanca => (PLACEHOLDER_ICON, vec![]),
                Accolade => (ACCOLADE_ON_ICON, accolade_tooltip()?),
                FischerRandom => (FISCHER_RANDOM_ON_ICON, fischer_random_tooltip()?),
                DuckChess => (DUCK_CHESS_ON_ICON, duck_chess_tooltip()?),
                AtomicChess => panic!("Atomic chess disabled"),
                FogOfWar => (FOG_OF_WAR_ON_ICON, fog_of_war_tooltip()?),
                Koedem => (KOEDEM_ON_ICON, koedem_tooltip()?),
                Duplicate => (DUPLICATE_ON_ICON, duplicate_tooltip()?),
            };
            Ok((icon, variant.to_human_readable(), Some(combine_elements(tooltip)?)))
        })
        .collect();
    let mut variants = variants?;
    if variants.is_empty() {
        variants.push(("", "—", None));
    }
    let table = web_document().create_element("table")?;
    for (i, (icon, name, tooltip)) in variants.into_iter().enumerate() {
        let tr = table.new_child_element("tr")?;
        if i == 0 {
            tr.new_child_element("td")?
                .with_classes(["readonly-rule-caption", "valign-baseline"])?
                .set_text_content(Some("Variants"));
        } else {
            tr.new_child_element("td")?;
        };
        tr.new_child_element("td")?
            .with_classes(["readonly-rule-variant-icon"])?
            .set_inner_html(icon);
        tr.new_child_element("td")?
            .with_classes(["readonly-rule-variant", "valign-baseline"])?
            .set_text_content(Some(name));
        {
            let td = tr.new_child_element("td")?;
            if let Some(tooltip) = tooltip {
                td.append_element(standalone_tooltip(tooltip, ["tooltip-standalone-small"])?)?;
            }
        }
    }

    {
        let tr = table.new_child_element("tr")?;
        tr.new_child_element("td")?.with_classes(["readonly-rule-separator"])?;
    }

    let mut rule_rows = vec![];
    rule_rows.push((
        "Time control",
        rules.chess_rules.time_control.to_string(),
        Some(combine_elements(starting_time_tooltip(None)?)?),
    ));
    if let Some(bughouse_rules) = rules.bughouse_rules() {
        let promotion_tooltip = match bughouse_rules.promotion {
            Promotion::Upgrade => promotion_upgrade_tooltip()?,
            Promotion::Discard => promotion_discard_tooltip()?,
            Promotion::Steal => promotion_steal_specific_tooltip(&rules.chess_rules)?,
        };
        rule_rows.push((
            "Promotion",
            bughouse_rules.promotion.to_human_readable().to_owned(),
            Some(combine_elements(promotion_tooltip)?),
        ));
        rule_rows.push((
            "Pawn drop ranks",
            bughouse_rules.pawn_drop_ranks.to_human_readable(),
            Some(combine_elements(pawn_drop_rank_specific_tooltip(
                rules.chess_rules.board_shape(),
                bughouse_rules.pawn_drop_ranks.min,
                bughouse_rules.pawn_drop_ranks.max,
            )?)?),
        ));
    }
    if rules.chess_rules.regicide() {
        rule_rows.push((
            "",
            "Regicide".to_owned(),
            Some(combine_elements(regicide_specific_tooltip(&rules.chess_rules)?)?),
        ))
    } else {
        if let Some(bughouse_rules) = rules.bughouse_rules() {
            let drop_aggression_tooltip = match bughouse_rules.drop_aggression {
                DropAggression::NoCheck => drop_aggression_no_check_tooltip()?,
                DropAggression::NoChessMate => drop_aggression_no_chess_mate_tooltip()?,
                DropAggression::NoBughouseMate => drop_aggression_no_bughouse_mate_tooltip()?,
                DropAggression::MateAllowed => drop_aggression_mate_allowed_tooltip()?,
            };
            rule_rows.push((
                "Drop aggression",
                bughouse_rules.drop_aggression.to_human_readable().to_owned(),
                Some(combine_elements(drop_aggression_tooltip)?),
            ));
        }
    }
    for (caption, value, tooltip) in rule_rows {
        let tr = table.new_child_element("tr")?;
        {
            let td = tr
                .new_child_element("td")?
                .with_classes(["readonly-rule-caption", "valign-baseline"])?;
            td.set_text_content(Some(caption));
            td.set_attribute("colspan", "2")?;
        }
        tr.new_child_element("td")?
            .with_classes(["readonly-rule-detail", "valign-baseline"])?
            .set_text_content(Some(&value));
        {
            let td = tr.new_child_element("td")?;
            if let Some(tooltip) = tooltip {
                td.append_element(standalone_tooltip(tooltip, ["tooltip-standalone-small"])?)?;
            }
        }
    }
    Ok(table)
}

fn new_match_rules_variants() -> JsResult<HashMap<String, String>> {
    let body = web_document().get_existing_element_by_id("create-match-rule-variants")?;
    let buttons = body.get_elements_by_class_name("rule-variant-button");
    let mut variants = HashMap::new();
    for button in buttons.into_iterator() {
        if button.is_displayed() {
            let name = button.get_attribute("data-variant-name").unwrap();
            let value = button.get_attribute("data-variant-value").unwrap();
            assert!(variants.insert(name, value).is_none());
        }
    }
    Ok(variants)
}

fn new_match_rules_form_data() -> JsResult<web_sys::FormData> {
    let node = web_document().get_existing_element_by_id("menu-create-match-page")?;
    web_sys::FormData::new_with_form(&node.dyn_into()?)
}

pub fn update_new_match_rules_body() -> JsResult<()> {
    let variants = new_match_rules_variants()?;
    let duck_chess = variants.get(DUCK_CHESS).unwrap() == "on";
    let fog_of_war = variants.get(FOG_OF_WAR).unwrap() == "on";
    let koedem = variants.get(KOEDEM).unwrap() == "on";
    let atomic_chess = false;
    // Should mirror `ChessRules::regicide`. Could've constructed `ChessRules` and called it
    // directly, but doing so could fail due to unrelated problems, e.g. errors in "starting time"
    // format.
    let regicide = duck_chess || atomic_chess || fog_of_war || koedem;
    for node in web_document().get_elements_by_class_name(REGICIDE_CLASS) {
        node.set_displayed(regicide)?;
    }
    for node in web_document().get_elements_by_class_name(&rule_setting_class(DROP_AGGRESSION)) {
        node.set_displayed(!regicide)?;
    }

    let preset = new_match_rules().map_or(None, |r| r.chess_rules.get_preset());
    activate_preset_button(preset)?;
    Ok(())
}

pub fn new_match_rules() -> JsResult<Rules> {
    let variants = new_match_rules_variants()?;
    let details = new_match_rules_form_data()?;

    // Chess variants
    let fairy_pieces = match variants.get(FAIRY_PIECES).unwrap().as_str() {
        "off" => FairyPieces::NoFairy,
        "accolade" => FairyPieces::Accolade,
        "capablanca" => FairyPieces::Capablanca,
        s => return Err(format!("Invalid fairy pieces: {s}").into()),
    };
    let starting_position = match variants.get(STARTING_POSITION).unwrap().as_str() {
        "off" => StartingPosition::Classic,
        "fischer-random" => StartingPosition::FischerRandom,
        s => return Err(format!("Invalid starting position: {s}").into()),
    };
    let duck_chess = match variants.get(DUCK_CHESS).unwrap().as_str() {
        "off" => false,
        "on" => true,
        s => return Err(format!("Invalid duck chess option: {s}").into()),
    };
    let fog_of_war = match variants.get(FOG_OF_WAR).unwrap().as_str() {
        "off" => false,
        "on" => true,
        s => return Err(format!("Invalid fog of war option: {s}").into()),
    };
    let koedem = match variants.get(KOEDEM).unwrap().as_str() {
        "off" => false,
        "on" => true,
        s => return Err(format!("Invalid koedem option: {s}").into()),
    };
    let duplicate = match variants.get(DUPLICATE).unwrap().as_str() {
        "off" => false,
        "on" => true,
        s => return Err(format!("Invalid duplicate option: {s}").into()),
    };
    let atomic_chess = false;

    // Other chess rules
    let promotion = match details.get(PROMOTION).as_string().unwrap().as_str() {
        "upgrade" => Promotion::Upgrade,
        "discard" => Promotion::Discard,
        "steal" => Promotion::Steal,
        s => return Err(format!("Invalid promotion: {s}").into()),
    };
    let drop_aggression = match details.get(DROP_AGGRESSION).as_string().unwrap().as_str() {
        "no-check" => DropAggression::NoCheck,
        "no-chess-mate" => DropAggression::NoChessMate,
        "no-bughouse-mate" => DropAggression::NoBughouseMate,
        "mate-allowed" => DropAggression::MateAllowed,
        s => return Err(format!("Invalid drop aggression: {s}").into()),
    };
    let starting_time = details.get(STARTING_TIME).as_string().unwrap();
    let Some(starting_time) = duration_from_mss(&starting_time) else {
        return Err(format!("Invalid starting time: {starting_time}").into());
    };
    let pawn_drop_ranks = details.get(PAWN_DROP_RANKS).as_string().unwrap();
    let Ok(pawn_drop_ranks) = PawnDropRanks::from_pgn(&pawn_drop_ranks) else {
        return Err(format!("Invalid pawn drop ranks: {pawn_drop_ranks}").into());
    };

    // Non-chess rules
    let rated = match details.get(RATING).as_string().unwrap().as_str() {
        "rated" => true,
        "unrated" => false,
        s => return Err(format!("Invalid rating: {s}").into()),
    };
    let public = true; // Make this configurable.

    // Combine everything together
    let match_rules = MatchRules { rated, public };
    let mut chess_rules = ChessRules {
        fairy_pieces,
        starting_position,
        duck_chess,
        atomic_chess,
        fog_of_war,
        time_control: TimeControl { starting_time },
        bughouse_rules: Some(BughouseRules {
            koedem,
            duplicate,
            promotion,
            pawn_drop_ranks,
            drop_aggression,
        }),
    };
    if chess_rules.regicide() {
        chess_rules.bughouse_rules.as_mut().unwrap().drop_aggression = DropAggression::MateAllowed;
    }
    let rules = Rules { match_rules, chess_rules };
    if let Err(message) = rules.verify() {
        return Err(IgnorableError { message }.into());
    }
    Ok(rules)
}

fn new_match_apply_preset(preset: RulesPreset) -> JsResult<()> {
    new_match_apply_rules(&ChessRules::from_preset(preset))
}

fn new_match_apply_rules(rules: &ChessRules) -> JsResult<()> {
    let bughouse_rules = rules.bughouse_rules.as_ref().unwrap();

    // Chess variants
    activate_variant_button_value(FAIRY_PIECES, match rules.fairy_pieces {
        FairyPieces::NoFairy => "off",
        FairyPieces::Accolade => "accolade",
        FairyPieces::Capablanca => "capablanca",
    })?;
    activate_variant_button_value(STARTING_POSITION, match rules.starting_position {
        StartingPosition::Classic => "off",
        StartingPosition::FischerRandom => "fischer-random",
    })?;
    activate_variant_button_value(DUCK_CHESS, match rules.duck_chess {
        false => "off",
        true => "on",
    })?;
    activate_variant_button_value(FOG_OF_WAR, match rules.fog_of_war {
        false => "off",
        true => "on",
    })?;
    activate_variant_button_value(KOEDEM, match bughouse_rules.koedem {
        false => "off",
        true => "on",
    })?;
    activate_variant_button_value(DUPLICATE, match bughouse_rules.duplicate {
        false => "off",
        true => "on",
    })?;

    // Other chess rules
    set_select_value(PROMOTION, match bughouse_rules.promotion {
        Promotion::Upgrade => "upgrade",
        Promotion::Discard => "discard",
        Promotion::Steal => "steal",
    })?;
    set_select_value(DROP_AGGRESSION, match bughouse_rules.drop_aggression {
        DropAggression::NoCheck => "no-check",
        DropAggression::NoChessMate => "no-chess-mate",
        DropAggression::NoBughouseMate => "no-bughouse-mate",
        DropAggression::MateAllowed => "mate-allowed",
    })?;
    set_input_value(STARTING_TIME, &duration_to_mss(rules.time_control.starting_time))?;
    set_input_value(PAWN_DROP_RANKS, &bughouse_rules.pawn_drop_ranks.to_pgn())?;

    // Non-chess rules (like RATING) are out of scope.

    // Final touches
    update_new_match_rules_body()?;
    Ok(())
}

pub fn variant_icons(rules: &ChessRules) -> Vec<&'static str> {
    use ChessVariant::*;
    rules
        .variants()
        .into_iter()
        .map(|variant| match variant {
            Capablanca => PLACEHOLDER_ICON,
            Accolade => ACCOLADE_ON_ICON,
            FischerRandom => FISCHER_RANDOM_ON_ICON,
            DuckChess => DUCK_CHESS_ON_ICON,
            AtomicChess => panic!("Atomic chess disabled"),
            FogOfWar => FOG_OF_WAR_ON_ICON,
            Koedem => KOEDEM_ON_ICON,
            Duplicate => DUPLICATE_ON_ICON,
        })
        .collect()
}
